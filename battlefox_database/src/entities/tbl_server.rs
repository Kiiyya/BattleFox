//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "tbl_server")]
pub struct Model {
    #[sea_orm(column_name = "ServerID", primary_key)]
    pub server_id: u16,
    #[sea_orm(column_name = "ServerGroup")]
    pub server_group: u8,
    #[sea_orm(column_name = "IP_Address", unique)]
    pub ip_address: Option<String>,
    #[sea_orm(column_name = "ServerName")]
    pub server_name: Option<String>,
    #[sea_orm(column_name = "GameID")]
    pub game_id: u8,
    #[sea_orm(column_name = "usedSlots")]
    pub used_slots: Option<u16>,
    #[sea_orm(column_name = "maxSlots")]
    pub max_slots: Option<u16>,
    #[sea_orm(column_name = "mapName")]
    pub map_name: Option<String>,
    #[sea_orm(column_name = "fullMapName", column_type = "Text", nullable)]
    pub full_map_name: Option<String>,
    #[sea_orm(column_name = "Gamemode")]
    pub gamemode: Option<String>,
    #[sea_orm(column_name = "GameMod")]
    pub game_mod: Option<String>,
    #[sea_orm(column_name = "PBversion")]
    pub p_bversion: Option<String>,
    #[sea_orm(column_name = "ConnectionState")]
    pub connection_state: Option<String>,
    pub battlemanager_endpoint: Option<String>,
    pub battlemanager_lastconnection: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::adkats_challenge_reward::Entity")]
    AdkatsChallengeReward,
    #[sea_orm(has_many = "super::adkats_challenge_rule::Entity")]
    AdkatsChallengeRule,
    #[sea_orm(has_many = "super::adkats_infractions_server::Entity")]
    AdkatsInfractionsServer,
    #[sea_orm(has_many = "super::adkats_records_debug::Entity")]
    AdkatsRecordsDebug,
    #[sea_orm(has_many = "super::adkats_records_main::Entity")]
    AdkatsRecordsMain,
    #[sea_orm(has_many = "super::adkats_settings::Entity")]
    AdkatsSettings,
    #[sea_orm(has_many = "super::adkats_specialplayers::Entity")]
    AdkatsSpecialplayers,
    #[sea_orm(has_many = "super::adkats_statistics::Entity")]
    AdkatsStatistics,
    #[sea_orm(has_many = "super::bfacp_settings_servers::Entity")]
    BfacpSettingsServers,
    #[sea_orm(has_many = "super::tbl_server_player::Entity")]
    TblServerPlayer,
    #[sea_orm(has_many = "super::tbl_server_stats::Entity")]
    TblServerStats,
}

impl Related<super::adkats_challenge_reward::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsChallengeReward.def()
    }
}

impl Related<super::adkats_challenge_rule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsChallengeRule.def()
    }
}

impl Related<super::adkats_infractions_server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsInfractionsServer.def()
    }
}

impl Related<super::adkats_records_debug::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsRecordsDebug.def()
    }
}

impl Related<super::adkats_records_main::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsRecordsMain.def()
    }
}

impl Related<super::adkats_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsSettings.def()
    }
}

impl Related<super::adkats_specialplayers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsSpecialplayers.def()
    }
}

impl Related<super::adkats_statistics::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsStatistics.def()
    }
}

impl Related<super::bfacp_settings_servers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BfacpSettingsServers.def()
    }
}

impl Related<super::tbl_server_player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblServerPlayer.def()
    }
}

impl Related<super::tbl_server_stats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblServerStats.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

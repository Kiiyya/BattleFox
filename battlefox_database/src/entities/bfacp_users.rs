//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "bfacp_users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub confirmation_code: String,
    pub remember_token: Option<String>,
    pub confirmed: i8,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub lastseen_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bfacp_assigned_roles::Entity")]
    BfacpAssignedRoles,
    #[sea_orm(has_many = "super::bfacp_settings_users::Entity")]
    BfacpSettingsUsers,
    #[sea_orm(has_many = "super::bfacp_users_soldiers::Entity")]
    BfacpUsersSoldiers,
}

impl Related<super::bfacp_assigned_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BfacpAssignedRoles.def()
    }
}

impl Related<super::bfacp_settings_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BfacpSettingsUsers.def()
    }
}

impl Related<super::bfacp_users_soldiers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BfacpUsersSoldiers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

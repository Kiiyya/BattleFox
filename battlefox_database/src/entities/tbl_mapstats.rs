//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "tbl_mapstats")]
pub struct Model {
    #[sea_orm(column_name = "ID", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "ServerID")]
    pub server_id: u16,
    #[sea_orm(column_name = "TimeMapLoad")]
    pub time_map_load: Option<DateTime>,
    #[sea_orm(column_name = "TimeRoundStarted")]
    pub time_round_started: Option<DateTime>,
    #[sea_orm(column_name = "TimeRoundEnd")]
    pub time_round_end: Option<DateTime>,
    #[sea_orm(column_name = "MapName")]
    pub map_name: Option<String>,
    #[sea_orm(column_name = "Gamemode")]
    pub gamemode: Option<String>,
    #[sea_orm(column_name = "Roundcount")]
    pub roundcount: i16,
    #[sea_orm(column_name = "NumberofRounds")]
    pub numberof_rounds: i16,
    #[sea_orm(column_name = "MinPlayers")]
    pub min_players: i16,
    #[sea_orm(column_name = "AvgPlayers")]
    pub avg_players: f64,
    #[sea_orm(column_name = "MaxPlayers")]
    pub max_players: i16,
    #[sea_orm(column_name = "PlayersJoinedServer")]
    pub players_joined_server: i16,
    #[sea_orm(column_name = "PlayersLeftServer")]
    pub players_left_server: i16,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

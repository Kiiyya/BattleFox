//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "adkats_specialplayers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub specialplayer_id: u32,
    pub player_group: String,
    pub player_id: Option<u32>,
    pub player_game: Option<u8>,
    pub player_server: Option<u16>,
    pub player_identifier: Option<String>,
    pub player_effective: DateTime,
    pub player_expiration: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tbl_games::Entity",
        from = "Column::PlayerGame",
        to = "super::tbl_games::Column::GameId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TblGames,
    #[sea_orm(
        belongs_to = "super::tbl_playerdata::Entity",
        from = "Column::PlayerId",
        to = "super::tbl_playerdata::Column::PlayerId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TblPlayerdata,
    #[sea_orm(
        belongs_to = "super::tbl_server::Entity",
        from = "Column::PlayerServer",
        to = "super::tbl_server::Column::ServerId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    TblServer,
}

impl Related<super::tbl_games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblGames.def()
    }
}

impl Related<super::tbl_playerdata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblPlayerdata.def()
    }
}

impl Related<super::tbl_server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblServer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "adkats_challenge_entry")]
pub struct Model {
    #[sea_orm(column_name = "ID", primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "PlayerID")]
    pub player_id: u32,
    #[sea_orm(column_name = "RuleID")]
    pub rule_id: u32,
    #[sea_orm(column_name = "Completed")]
    pub completed: u32,
    #[sea_orm(column_name = "Failed")]
    pub failed: u32,
    #[sea_orm(column_name = "Canceled")]
    pub canceled: u32,
    #[sea_orm(column_name = "StartRound")]
    pub start_round: u32,
    #[sea_orm(column_name = "StartTime")]
    pub start_time: DateTime,
    #[sea_orm(column_name = "CompleteTime")]
    pub complete_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tbl_playerdata::Entity",
        from = "Column::PlayerId",
        to = "super::tbl_playerdata::Column::PlayerId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TblPlayerdata,
    #[sea_orm(
        belongs_to = "super::adkats_challenge_rule::Entity",
        from = "Column::RuleId",
        to = "super::adkats_challenge_rule::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    AdkatsChallengeRule,
    #[sea_orm(has_many = "super::adkats_challenge_entry_detail::Entity")]
    AdkatsChallengeEntryDetail,
}

impl Related<super::tbl_playerdata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TblPlayerdata.def()
    }
}

impl Related<super::adkats_challenge_rule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsChallengeRule.def()
    }
}

impl Related<super::adkats_challenge_entry_detail::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdkatsChallengeEntryDetail.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
